/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Cost as PrismaCost,
  Apartment as PrismaApartment,
} from "@prisma/client";

export class CostServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CostCountArgs, "select">): Promise<number> {
    return this.prisma.cost.count(args);
  }

  async costs<T extends Prisma.CostFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostFindManyArgs>
  ): Promise<PrismaCost[]> {
    return this.prisma.cost.findMany<Prisma.CostFindManyArgs>(args);
  }
  async cost<T extends Prisma.CostFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostFindUniqueArgs>
  ): Promise<PrismaCost | null> {
    return this.prisma.cost.findUnique(args);
  }
  async createCost<T extends Prisma.CostCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostCreateArgs>
  ): Promise<PrismaCost> {
    return this.prisma.cost.create<T>(args);
  }
  async updateCost<T extends Prisma.CostUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostUpdateArgs>
  ): Promise<PrismaCost> {
    return this.prisma.cost.update<T>(args);
  }
  async deleteCost<T extends Prisma.CostDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostDeleteArgs>
  ): Promise<PrismaCost> {
    return this.prisma.cost.delete(args);
  }

  async getApartment(parentId: string): Promise<PrismaApartment | null> {
    return this.prisma.cost
      .findUnique({
        where: { id: parentId },
      })
      .apartment();
  }
}
