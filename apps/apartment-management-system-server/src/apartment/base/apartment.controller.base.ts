/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ApartmentService } from "../apartment.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ApartmentCreateInput } from "./ApartmentCreateInput";
import { Apartment } from "./Apartment";
import { ApartmentFindManyArgs } from "./ApartmentFindManyArgs";
import { ApartmentWhereUniqueInput } from "./ApartmentWhereUniqueInput";
import { ApartmentUpdateInput } from "./ApartmentUpdateInput";
import { CostFindManyArgs } from "../../cost/base/CostFindManyArgs";
import { Cost } from "../../cost/base/Cost";
import { CostWhereUniqueInput } from "../../cost/base/CostWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ApartmentControllerBase {
  constructor(
    protected readonly service: ApartmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Apartment })
  @nestAccessControl.UseRoles({
    resource: "Apartment",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createApartment(
    @common.Body() data: ApartmentCreateInput
  ): Promise<Apartment> {
    return await this.service.createApartment({
      data: data,
      select: {
        createdAt: true,
        id: true,
        unitNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Apartment] })
  @ApiNestedQuery(ApartmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Apartment",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async apartments(@common.Req() request: Request): Promise<Apartment[]> {
    const args = plainToClass(ApartmentFindManyArgs, request.query);
    return this.service.apartments({
      ...args,
      select: {
        createdAt: true,
        id: true,
        unitNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Apartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Apartment",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async apartment(
    @common.Param() params: ApartmentWhereUniqueInput
  ): Promise<Apartment | null> {
    const result = await this.service.apartment({
      where: params,
      select: {
        createdAt: true,
        id: true,
        unitNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Apartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Apartment",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateApartment(
    @common.Param() params: ApartmentWhereUniqueInput,
    @common.Body() data: ApartmentUpdateInput
  ): Promise<Apartment | null> {
    try {
      return await this.service.updateApartment({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          unitNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Apartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Apartment",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteApartment(
    @common.Param() params: ApartmentWhereUniqueInput
  ): Promise<Apartment | null> {
    try {
      return await this.service.deleteApartment({
        where: params,
        select: {
          createdAt: true,
          id: true,
          unitNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/costs")
  @ApiNestedQuery(CostFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Cost",
    action: "read",
    possession: "any",
  })
  async findCosts(
    @common.Req() request: Request,
    @common.Param() params: ApartmentWhereUniqueInput
  ): Promise<Cost[]> {
    const query = plainToClass(CostFindManyArgs, request.query);
    const results = await this.service.findCosts(params.id, {
      ...query,
      select: {
        amount: true,

        apartment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        description: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/costs")
  @nestAccessControl.UseRoles({
    resource: "Apartment",
    action: "update",
    possession: "any",
  })
  async connectCosts(
    @common.Param() params: ApartmentWhereUniqueInput,
    @common.Body() body: CostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      costs: {
        connect: body,
      },
    };
    await this.service.updateApartment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/costs")
  @nestAccessControl.UseRoles({
    resource: "Apartment",
    action: "update",
    possession: "any",
  })
  async updateCosts(
    @common.Param() params: ApartmentWhereUniqueInput,
    @common.Body() body: CostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      costs: {
        set: body,
      },
    };
    await this.service.updateApartment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/costs")
  @nestAccessControl.UseRoles({
    resource: "Apartment",
    action: "update",
    possession: "any",
  })
  async disconnectCosts(
    @common.Param() params: ApartmentWhereUniqueInput,
    @common.Body() body: CostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      costs: {
        disconnect: body,
      },
    };
    await this.service.updateApartment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/payments")
  @ApiNestedQuery(PaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async findPayments(
    @common.Req() request: Request,
    @common.Param() params: ApartmentWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayments(params.id, {
      ...query,
      select: {
        amount: true,

        apartment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "Apartment",
    action: "update",
    possession: "any",
  })
  async connectPayments(
    @common.Param() params: ApartmentWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        connect: body,
      },
    };
    await this.service.updateApartment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "Apartment",
    action: "update",
    possession: "any",
  })
  async updatePayments(
    @common.Param() params: ApartmentWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        set: body,
      },
    };
    await this.service.updateApartment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "Apartment",
    action: "update",
    possession: "any",
  })
  async disconnectPayments(
    @common.Param() params: ApartmentWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        disconnect: body,
      },
    };
    await this.service.updateApartment({
      where: params,
      data,
      select: { id: true },
    });
  }
}
