/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Apartment as PrismaApartment,
  Cost as PrismaCost,
  Payment as PrismaPayment,
} from "@prisma/client";

export class ApartmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApartmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.apartment.count(args);
  }

  async apartments<T extends Prisma.ApartmentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApartmentFindManyArgs>
  ): Promise<PrismaApartment[]> {
    return this.prisma.apartment.findMany<Prisma.ApartmentFindManyArgs>(args);
  }
  async apartment<T extends Prisma.ApartmentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApartmentFindUniqueArgs>
  ): Promise<PrismaApartment | null> {
    return this.prisma.apartment.findUnique(args);
  }
  async createApartment<T extends Prisma.ApartmentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApartmentCreateArgs>
  ): Promise<PrismaApartment> {
    return this.prisma.apartment.create<T>(args);
  }
  async updateApartment<T extends Prisma.ApartmentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApartmentUpdateArgs>
  ): Promise<PrismaApartment> {
    return this.prisma.apartment.update<T>(args);
  }
  async deleteApartment<T extends Prisma.ApartmentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApartmentDeleteArgs>
  ): Promise<PrismaApartment> {
    return this.prisma.apartment.delete(args);
  }

  async findCosts(
    parentId: string,
    args: Prisma.CostFindManyArgs
  ): Promise<PrismaCost[]> {
    return this.prisma.apartment
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .costs(args);
  }

  async findPayments(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.apartment
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }
}
